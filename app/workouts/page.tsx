'use client'

import { useState, useEffect } from 'react'

// –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const Button = ({ children, onClick, className = '' }: { children: React.ReactNode, onClick?: () => void, className?: string }) => (
  <button onClick={onClick} className={`px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 ${className}`}>
    {children}
  </button>
)

const Card = ({ children, className = '' }: { children: React.ReactNode, className?: string }) => (
  <div className={`bg-white rounded-lg border p-6 shadow-sm ${className}`}>
    {children}
  </div>
)

const CardHeader = ({ children }: { children: React.ReactNode }) => (
  <div className="mb-4">{children}</div>
)

const CardTitle = ({ children }: { children: React.ReactNode }) => (
  <h3 className="text-lg font-semibold">{children}</h3>
)

const CardContent = ({ children }: { children: React.ReactNode }) => (
  <div>{children}</div>
)

const Badge = ({ children, className = '' }: { children: React.ReactNode, className?: string }) => (
  <span className={`inline-block px-2 py-1 text-xs bg-gray-100 rounded ${className}`}>
    {children}
  </span>
)

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface Workout {
  message_id: number
  date: string
  day: number
  groups: string
  user: string
  main: Array<{
    name: string
    sets: number
    weight: number
  }>
  aux: Array<{
    name: string
    sets: number
    weight: number
  }>
  cooldown: string[]
}

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∏—Ç–∞–Ω–∏—è
interface Nutrition {
  date: string
  calories?: number
  steps?: number
  weight?: number
}

export default function WorkoutsPage() {
  const [workouts, setWorkouts] = useState<Workout[]>([])
  const [nutrition, setNutrition] = useState<Nutrition[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    loadWorkouts()
    loadNutrition()
  }, [])

  const loadWorkouts = async () => {
    try {
      const response = await fetch('/data/workouts.json')
      const data = await response.json()
      setWorkouts(data.sessions || [])
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', error)
    } finally {
      setLoading(false)
    }
  }

  const loadNutrition = async () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase —á–µ—Ä–µ–∑ API –º–∞—Ä—à—Ä—É—Ç
      const response = await fetch('/api/nutrition')
      const data = await response.json()
      setNutrition(data.nutrition || [])
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Ç–∞–Ω–∏—è:', error)
      // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
      setNutrition([])
    }
  }

  const saveNutritionToFirebase = async () => {
    console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–∞–Ω–∏—è –≤ Firebase...")

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∑–∞–º–µ—Ä–æ–≤)
    const columnsData: Record<string, any> = {}
    for (let col = 2; col <= 5; col++) {
      const dateInput = document.getElementById(`nutrition-date${col}`) as HTMLInputElement
      if (!dateInput || !dateInput.value) {
        columnsData[`col${col-1}`] = null
        continue
      }

      const columnData: any = {date: dateInput.value}
      let hasData = false

      // –ö–∞–ª–æ—Ä–∏–∏
      const caloriesInput = document.getElementById(`inputcalories_${col}`) as HTMLInputElement
      const calories = parseFloat(caloriesInput?.value || '')
      if (!isNaN(calories) && calories > 0) {
        columnData.calories = calories
        hasData = true
      }

      // –®–∞–≥–∏
      const stepsInput = document.getElementById(`inputsteps_${col}`) as HTMLInputElement
      const steps = parseFloat(stepsInput?.value || '')
      if (!isNaN(steps) && steps > 0) {
        columnData.steps = steps
        hasData = true
      }

      // –í–µ—Å
      const weightInput = document.getElementById(`inputweight_${col}`) as HTMLInputElement
      const weight = parseFloat(weightInput?.value || '')
      if (!isNaN(weight) && weight > 0) {
        columnData.weight = weight
        hasData = true
      }

      columnsData[`col${col-1}`] = hasData ? columnData : null
    }

    console.log("üìã –î–∞–Ω–Ω—ã–µ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", columnsData)

    if (Object.values(columnsData).every((col: any) => col === null)) {
      console.log("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
      alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ")
      return
    }

    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Firebase
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–∏—Ç–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firebase`)
      alert(`–î–∞–Ω–Ω—ã–µ –ø–∏—Ç–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firebase`)
    } catch(e) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firebase:", e)
      alert("–û—à–∏–±–∫–∞ Firebase ‚Äî –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
    }
  }

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="text-center">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...</div>
      </div>
    )
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</h1>
        <p className="text-gray-600">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ –∏ –ø–ª–∞–Ω–∞–º–∏ –∑–∞–Ω—è—Ç–∏–π
        </p>
      </div>

      <div className="space-y-6">
        {/* –°–ï–ö–¶–ò–Ø –ü–ò–¢–ê–ù–ò–Ø */}
        <Card>
          <CardHeader>
            <CardTitle>–ü–∏—Ç–∞–Ω–∏–µ</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="mb-4">
              <div className="text-sm text-gray-500 mb-4">
                –ó–∞–≥—Ä—É–∂–µ–Ω–æ {nutrition.length} –∑–∞–ø–∏—Å–µ–π –ø–∏—Ç–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
              </div>

              {/* –¢–∞–±–ª–∏—Ü–∞ –ø–∏—Ç–∞–Ω–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–µ –∑–∞–º–µ—Ä–æ–≤ */}
              <div className="grid grid-cols-5 gap-2 mb-4" style={{gridTemplateColumns: '200px repeat(4, 150px)'}}>
                {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ */}
                <div className="font-semibold p-2 border-b">–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å</div>
                <div className="p-2 border-b">
                  <input
                    id="nutrition-date2"
                    type="date"
                    className="w-full p-1 border rounded bg-white text-black"
                    defaultValue={new Date().toISOString().split('T')[0]}
                  />
                </div>
                <div className="p-2 border-b">
                  <input
                    id="nutrition-date3"
                    type="date"
                    className="w-full p-1 border rounded bg-white text-black"
                    defaultValue={new Date().toISOString().split('T')[0]}
                  />
                </div>
                <div className="p-2 border-b">
                  <input
                    id="nutrition-date4"
                    type="date"
                    className="w-full p-1 border rounded bg-white text-black"
                    defaultValue={new Date().toISOString().split('T')[0]}
                  />
                </div>
                <div className="p-2 border-b">
                  <input
                    id="nutrition-date5"
                    type="date"
                    className="w-full p-1 border rounded bg-white text-black"
                    defaultValue={new Date().toISOString().split('T')[0]}
                  />
                </div>

                {/* –†—è–¥—ã —Å –¥–∞–Ω–Ω—ã–º–∏ */}
                <div className="p-2 border-b font-medium">–ö–∞–ª–æ—Ä–∏–∏</div>
                <div className="p-2 border-b">
                  <input
                    id="inputcalories_2"
                    type="number"
                    step="1"
                    placeholder="–∫–∫–∞–ª"
                    className="w-full p-1 border rounded bg-white text-black"
                  />
                </div>
                <div className="p-2 border-b">
                  <input
                    id="inputcalories_3"
                    type="number"
                    step="1"
                    placeholder="–∫–∫–∞–ª"
                    className="w-full p-1 border rounded bg-white text-black"
                  />
                </div>
                <div className="p-2 border-b">
                  <input
                    id="inputcalories_4"
                    type="number"
                    step="1"
                    placeholder="–∫–∫–∞–ª"
                    className="w-full p-1 border rounded bg-white text-black"
                  />
                </div>
                <div className="p-2 border-b">
                  <input
                    id="inputcalories_5"
                    type="number"
                    step="1"
                    placeholder="–∫–∫–∞–ª"
                    className="w-full p-1 border rounded bg-white text-black"
                  />
                </div>

                <div className="p-2 border-b font-medium">–®–∞–≥–∏</div>
                <div className="p-2 border-b">
                  <input
                    id="inputsteps_2"
                    type="number"
                    step="1"
                    placeholder="—à–∞–≥–æ–≤"
                    className="w-full p-1 border rounded bg-white text-black"
                  />
                </div>
                <div className="p-2 border-b">
                  <input
                    id="inputsteps_3"
                    type="number"
                    step="1"
                    placeholder="—à–∞–≥–æ–≤"
                    className="w-full p-1 border rounded bg-white text-black"
                  />
                </div>
                <div className="p-2 border-b">
                  <input
                    id="inputsteps_4"
                    type="number"
                    step="1"
                    placeholder="—à–∞–≥–æ–≤"
                    className="w-full p-1 border rounded bg-white text-black"
                  />
                </div>
                <div className="p-2 border-b">
                  <input
                    id="inputsteps_5"
                    type="number"
                    step="1"
                    placeholder="—à–∞–≥–æ–≤"
                    className="w-full p-1 border rounded bg-white text-black"
                  />
                </div>

                <div className="p-2 border-b font-medium">–í–µ—Å</div>
                <div className="p-2 border-b">
                  <input
                    id="inputweight_2"
                    type="number"
                    step="0.1"
                    placeholder="–∫–≥"
                    className="w-full p-1 border rounded bg-white text-black"
                  />
                </div>
                <div className="p-2 border-b">
                  <input
                    id="inputweight_3"
                    type="number"
                    step="0.1"
                    placeholder="–∫–≥"
                    className="w-full p-1 border rounded bg-white text-black"
                  />
                </div>
                <div className="p-2 border-b">
                  <input
                    id="inputweight_4"
                    type="number"
                    step="0.1"
                    placeholder="–∫–≥"
                    className="w-full p-1 border rounded bg-white text-black"
                  />
                </div>
                <div className="p-2 border-b">
                  <input
                    id="inputweight_5"
                    type="number"
                    step="0.1"
                    placeholder="–∫–≥"
                    className="w-full p-1 border rounded bg-white text-black"
                  />
                </div>
              </div>

              <Button onClick={saveNutritionToFirebase} className="mt-4">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–∞–Ω–∏—è
              </Button>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>–ù–µ–¥–∞–≤–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</CardTitle>
          </CardHeader>
          <CardContent>
            {workouts.length === 0 ? (
              <p className="text-gray-500">–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</p>
            ) : (
              <div className="space-y-4">
                {workouts.slice(-3).map((workout) => (
                  <div key={workout.message_id} className="border rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="font-semibold">
                        –î–µ–Ω—å {workout.day} - {workout.groups}
                      </h3>
                      <Badge>
                        {new Date(workout.date).toLocaleDateString('ru-RU')}
                      </Badge>
                    </div>
                    <div className="text-sm text-gray-600">
                      {workout.main.length} –æ—Å–Ω–æ–≤–Ω—ã—Ö + {workout.aux.length} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardContent className="flex gap-4">
            <Button onClick={() => console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞')}>
              –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω
            </Button>
            <Button onClick={() => console.log('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–º–µ—Ä–æ–≤')}>
              –ò—Å—Ç–æ—Ä–∏—è –∑–∞–º–µ—Ä–æ–≤
            </Button>
            <Button onClick={() => console.log('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏')}>
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
            </Button>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
